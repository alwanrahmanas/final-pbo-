/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package uas;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.lang.NullPointerException;


/**
 *
 * @author 
 * Class ini adalah menu utama yang melaksanakan fungsi crud + ekspor
 * Class ini menerapkan design pattern template pada method clearForm(), ke Home(), dan check();
 */
public class HomePanel extends javax.swing.JPanel implements data {

    

    /**
     * Creates new form HomePanel
     */
    public final JScrollPane contentScrollPane;
    public String label;
    public String nim;
    public String id;
    public HomePanel(JScrollPane c, String label,String nim) throws SQLException, IOException {
        initComponents();
        this.contentScrollPane = c;
        jLabel2.setText("Welcome "+label+"!");
        if(nim!=null){
          this.nim = nim;   
         }else{
            this.nim ="222011374";
        }
        
        
        if("Dimensi".equals(dimensiComboBox.getSelectedItem().toString())){
             submitButton.setEnabled(false);
             updateButton.setEnabled(false);
         }
        if("Kategori".equals(kategoriComboBox.getSelectedItem().toString())){
             submitButton.setEnabled(false);
             updateButton.setEnabled(false);
         }
        if("Sub-kategori".equals(subKategoriComboBox.getSelectedItem().toString())){
             submitButton.setEnabled(false);
             updateButton.setEnabled(false);
         }
        loadTableData();
        
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        tanggalKegiatanChooser = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        namaKegiatanTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tempatKegiatanTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        dimensiComboBox = new javax.swing.JComboBox<>();
        kategoriComboBox = new javax.swing.JComboBox<>();
        subKategoriComboBox = new javax.swing.JComboBox<>();
        submitButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        tahunComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ipkmTable = new javax.swing.JTable();
        cariTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        exportButton = new javax.swing.JButton();
        keluarButton = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setBackground(new java.awt.Color(20, 20, 20));
        setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel1.setBackground(new java.awt.Color(20, 20, 20));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        tanggalKegiatanChooser.setBackground(new java.awt.Color(255, 255, 255));
        tanggalKegiatanChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tanggalKegiatanChooserMouseReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Tanggal Kegiatan");

        namaKegiatanTextField.setBackground(new java.awt.Color(255, 255, 255));
        namaKegiatanTextField.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        namaKegiatanTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                namaKegiatanTextFieldKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Nama Kegiatan");

        tempatKegiatanTextField.setBackground(new java.awt.Color(255, 255, 255));
        tempatKegiatanTextField.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        tempatKegiatanTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tempatKegiatanTextFieldKeyReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Tempat Kegiatan");

        jLabel7.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Komponen");

        dimensiComboBox.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        dimensiComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dimensi", "Kepemimpinan", "Kompetensi Individu", "Jiwa Sosial", "Pengembangan Minat dan Kreativitas" }));
        dimensiComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dimensiComboBoxItemStateChanged(evt);
            }
        });
        dimensiComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dimensiComboBoxActionPerformed(evt);
            }
        });

        kategoriComboBox.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        kategoriComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kategori" }));
        kategoriComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                kategoriComboBoxItemStateChanged(evt);
            }
        });
        kategoriComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kategoriComboBoxActionPerformed(evt);
            }
        });

        subKategoriComboBox.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        subKategoriComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sub-kategori" }));
        subKategoriComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subKategoriComboBoxItemStateChanged(evt);
            }
        });
        subKategoriComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subKategoriComboBoxActionPerformed(evt);
            }
        });

        submitButton.setBackground(new java.awt.Color(255, 255, 255));
        submitButton.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        submitButton.setForeground(new java.awt.Color(0, 0, 0));
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        updateButton.setForeground(new java.awt.Color(0, 0, 0));
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(0, 0, 0));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));

        clearButton.setBackground(new java.awt.Color(255, 255, 255));
        clearButton.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        clearButton.setForeground(new java.awt.Color(0, 0, 0));
        clearButton.setText("Clear");
        clearButton.setPreferredSize(new java.awt.Dimension(64, 27));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteButton)
                .addGap(18, 18, 18)
                .addComponent(updateButton)
                .addGap(18, 18, 18)
                .addComponent(submitButton)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel7)
                        .addComponent(subKategoriComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(kategoriComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dimensiComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(65, 65, 65)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tempatKegiatanTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                                        .addComponent(tanggalKegiatanChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(namaKegiatanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tanggalKegiatanChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(namaKegiatanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(3, 3, 3)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempatKegiatanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel7)
                        .addGap(52, 52, 52)
                        .addComponent(dimensiComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(kategoriComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(subKategoriComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 81, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(submitButton)
                            .addComponent(updateButton)
                            .addComponent(deleteButton)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        jPanel2.setBackground(new java.awt.Color(20, 20, 20));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        tahunComboBox.setBackground(new java.awt.Color(255, 255, 255));
        tahunComboBox.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        tahunComboBox.setForeground(new java.awt.Color(0, 0, 0));
        tahunComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tahun ", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022" }));
        tahunComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tahunComboBoxItemStateChanged(evt);
            }
        });
        tahunComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tahunComboBoxActionPerformed(evt);
            }
        });

        ipkmTable.setBackground(new java.awt.Color(64, 73, 82));
        ipkmTable.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        ipkmTable.setForeground(new java.awt.Color(255, 255, 255));
        ipkmTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama Kegiatan", "Tanggal Kegiatan", "Tempat Kegiatan", "Sub-kategori"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ipkmTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ipkmTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ipkmTable);

        cariTextField.setBackground(new java.awt.Color(255, 255, 255));
        cariTextField.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        cariTextField.setForeground(new java.awt.Color(0, 0, 0));
        cariTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cariTextFieldMouseExited(evt);
            }
        });
        cariTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cariTextFieldActionPerformed(evt);
            }
        });
        cariTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cariTextFieldKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Cari Nama Kegiatan");

        resetButton.setBackground(new java.awt.Color(255, 255, 255));
        resetButton.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        resetButton.setForeground(new java.awt.Color(0, 0, 0));
        resetButton.setText("Reset ");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel3))
                                    .addComponent(cariTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tahunComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(43, 43, 43))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cariTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tahunComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(resetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBackground(new java.awt.Color(64, 73, 82));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Franklin Gothic Book", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("welcome");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel8.setFont(new java.awt.Font("Franklin Gothic Book", 0, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("SISTEM INPUT IPKM POLSTAT STIS");

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar/sipadu.png"))); // NOI18N

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("SIPADU ");

        exportButton.setBackground(new java.awt.Color(255, 255, 255));
        exportButton.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        exportButton.setForeground(new java.awt.Color(0, 0, 0));
        exportButton.setText("Ekspor");
        exportButton.setMinimumSize(new java.awt.Dimension(68, 28));
        exportButton.setPreferredSize(new java.awt.Dimension(68, 27));
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        keluarButton.setBackground(new java.awt.Color(255, 51, 51));
        keluarButton.setFont(new java.awt.Font("Franklin Gothic Book", 0, 13)); // NOI18N
        keluarButton.setForeground(new java.awt.Color(0, 0, 0));
        keluarButton.setText("Keluar");
        keluarButton.setMinimumSize(new java.awt.Dimension(68, 28));
        keluarButton.setPreferredSize(new java.awt.Dimension(68, 27));
        keluarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keluarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel10))
                    .addComponent(jLabel9))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(318, 318, 318)
                        .addComponent(jLabel8)
                        .addContainerGap(566, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(427, 427, 427)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(keluarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(202, 202, 202))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel2)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(keluarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(173, 173, 173))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cariTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cariTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cariTextFieldActionPerformed
    
    
    //method ini akan mengirimkan input data ke database
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        
        //check();
        
        Mahasiswa mhs = new Mahasiswa();
        //Mahasiswa m = new Mahasiswa();
        
        
        String namaKegiatan = namaKegiatanTextField.getText();
        String tanggalKegiatan = tanggalKegiatanChooser.getDate().toString();
        String tempatKegiatan = tempatKegiatanTextField.getText();
        String dimensi = dimensiComboBox.getSelectedItem().toString(); 
        String kategori = kategoriComboBox.getSelectedItem().toString();
        String subKategori = subKategoriComboBox.getSelectedItem().toString();
        String nim =  this.nim;
        
        mhs.setNamaKegiatan(namaKegiatan);
        mhs.setTanggalKegiatan(tanggalKegiatan);
        mhs.setTempatKegiatan(tempatKegiatan);
        mhs.setDimensi(dimensi);
        mhs.setKategori(kategori);
        mhs.setSubKategori(subKategori);
        mhs.setNim(nim);
        
        try {
                Database.getInstance().insertIPKM(mhs);
                JOptionPane.showMessageDialog(this, "Sukses Tersimpan");
                
                
                
            } catch (SQLException ex) {
                Logger.getLogger(RegisterForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        try {
            loadTableData();
            clearForm();
            
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(this, "Calender value = null", "Gagal", 
                 JOptionPane.ERROR_MESSAGE);
            System.out.print("Caught the NullPointerException");
            
            JOptionPane.showMessageDialog(this, "Null value detected");
        }catch (SQLException | IOException ex) {
            Logger.getLogger(HomePanel.class.getName()).log(Level.SEVERE, null, ex);
        } 
            
        check(); 
        
        
        
        
    }//GEN-LAST:event_submitButtonActionPerformed
    //method ini akan sensitif terhadap perubahan item di dimensiComboBox
    private void dimensiComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dimensiComboBoxItemStateChanged
         //mengetest value dengan method check()
        
         check();

    }//GEN-LAST:event_dimensiComboBoxItemStateChanged

    
    
       
    //method ini akan mengisi combobox child sesuai value yang dipilih combobox parent
    public ArrayList<String> isiMatkul(String i){
    
    ArrayList<String> data = new ArrayList<>();
    
    if("Kepemimpinan".equals(i)){
                data.add("Pendidikan");
                data.add("Ormawa");
                data.add("Pelaksana Organisasi");
                data.add("Narasumber");
                data.add("Prestasi");
        
    }
    
    else if("Kompetensi Individu".equals(i)){
                data.add("Juara Kompetisi");
                data.add("Peserta Kompetisi");
                data.add("Olimpiade Perguruan Tinggi Kedinasan");
                data.add("Kompetisi Internal STIS");
                data.add("Putra-Putri STIS");
                data.add("Penulis Buku");
                data.add("Jurnal Ilmiah");
                data.add("Menjadi Pembicara/Pelatih");
    }
    
    else if("Jiwa Sosial".equals(i)){
                data.add("Panitia Kegiatan Sosial");
                data.add("Relawan Kegiatan Sosial");
                data.add("Pelatihan dan Pengabdian Masyarakat");
                data.add("Kegiatan Sosial Lainnya");
    }
    else if("Pengembangan Minat dan Kreativitas".equals(i)){
                data.add("Peserta Seminar");
                data.add("Keanggotaan UKM/Bidang/Divisi");
                data.add("Peserta Kegiatan Terbuka UKM/SEMA");
    }
    
    return data;
    
} 
    private void kategoriComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_kategoriComboBoxItemStateChanged
        // TODO add your handling code here:
     
//mengetest value dengan method check()
      check();
    }//GEN-LAST:event_kategoriComboBoxItemStateChanged

    //method ini akan memilih nilai yang sesuai dengan value yang dipilih, kemudian child combobox akan menyesuaikan value yang ada
    //dengan value terpilih
    private void kategoriComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kategoriComboBoxActionPerformed
        // TODO add your handling code here:
      
      if("Kategori".equals(kategoriComboBox.getSelectedItem().toString())){
             submitButton.setEnabled(false);
             updateButton.setEnabled(false);
         }else{
             submitButton.setEnabled(true);
             updateButton.setEnabled(true);
         }  
  
        
      if(kategoriComboBox.getSelectedItem()==null){ 
          System.out.println(kategoriComboBox.getSelectedItem().toString());}
      else{
         
        if ("Pendidikan".equals(kategoriComboBox.getSelectedItem().toString())) {
            String jurusan= "Pendidikan";
            subKategoriComboBox.removeAllItems();
            
            isiSubKategori(jurusan);
        }
        else if("Ormawa".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Ormawa";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Pelaksana Organisasi".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Pelaksana Organisasi";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Narasumber".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Narasumber";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Prestasi".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Prestasi";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Juara Kompetisi".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Juara Kompetisi";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Peserta Kompetisi".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Peserta Kompetisi";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Olimpiade Perguruan Tinggi Kedinasan".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Olimpiade Perguruan Tinggi Kedinasan";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Kompetisi Internal STIS".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Kompetisi Internal STIS";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Putra-Putri STIS".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Putra-Putri STIS";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Penulis Buku".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Penulis Buku";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Jurnal Ilmiah".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Jurnal Ilmiah";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Menjadi Pembicara/Pelatih".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Menjadi Pembicara/Pelatih";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
            System.out.println(subKategoriComboBox.getSelectedIndex());
        }
        else if("Panitia Kegiatan Sosial".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Panitia Kegiatan Sosial";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Relawan Kegiatan Sosial".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Relawan Kegiatan Sosial";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Pelatihan dan Pengabdian Masyarakat".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Pelatihan dan Pengabdian Masyarakat";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Kegiatan Sosial Lainnya".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Kegiatan Sosial Lainnya";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Peserta Seminar".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Peserta Seminar";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Keanggotaan UKM/Bidang/Divisi".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Keanggotaan UKM/Bidang/Divisi";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        else if("Peserta Kegiatan Terbuka UKM/SEMA".equals(kategoriComboBox.getSelectedItem().toString())){
            String jurusan= "Peserta Kegiatan Terbuka UKM/SEMA";
            subKategoriComboBox.removeAllItems();
            isiSubKategori(jurusan);
        }
        
        else{subKategoriComboBox.removeAllItems();
        subKategoriComboBox.addItem("Sub-kategori");}
         
      }
      
      check();
    }//GEN-LAST:event_kategoriComboBoxActionPerformed
    //method ini akan memilih nilai yang sesuai dengan value yang dipilih, kemudian child combobox akan menyesuaikan value yang ada
    //dengan value terpilih
    private void dimensiComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dimensiComboBoxActionPerformed
        // TODO add your handling code here:
         if(!"Dimensi".equals(dimensiComboBox.getSelectedItem().toString())){
             submitButton.setEnabled(true);
             updateButton.setEnabled(true);
        }else{
            submitButton.setEnabled(false);
             updateButton.setEnabled(false);  
         }
         if("Kepemimpinan".equals(dimensiComboBox.getSelectedItem().toString())){
        String jurusan= "Kepemimpinan";
        ArrayList<String> data = new ArrayList<>();
        data = isiMatkul(jurusan);
        int n = isiMatkul(jurusan).size();
        int m = kategoriComboBox.getItemCount();
        hapus(kategoriComboBox,m);
        System.out.println(m);
        for(int i=0;i<n;i++){
            kategoriComboBox.addItem(data.get(i));
        }
        
        }
        
        else if("Kompetensi Individu".equals(dimensiComboBox.getSelectedItem().toString())){
         String jurusan= "Kompetensi Individu";
     
        ArrayList<String> data = new ArrayList<>();
        data = isiMatkul(jurusan);
        int m = kategoriComboBox.getItemCount();
        hapus(kategoriComboBox,m);
        int n = isiMatkul(jurusan).size();
        
        for(int i=0;i<n;i++){
            kategoriComboBox.addItem(data.get(i));
        }
         
        }
        
        else if("Jiwa Sosial".equals(dimensiComboBox.getSelectedItem().toString())){
         String jurusan= "Jiwa Sosial";
         ArrayList<String> data = new ArrayList<>();
         data = isiMatkul(jurusan);
         int n = isiMatkul(jurusan).size();
         int m = kategoriComboBox.getItemCount();
         hapus(kategoriComboBox,m);
         for(int i=0;i<n;i++){
            kategoriComboBox.addItem(data.get(i));
         }
        }
         
        else if("Pengembangan Minat dan Kreativitas".equals(dimensiComboBox.getSelectedItem().toString())){
         String jurusan= "Pengembangan Minat dan Kreativitas";
         ArrayList<String> data = new ArrayList<>();
         data = isiMatkul(jurusan);
         int n = isiMatkul(jurusan).size();
         int m = kategoriComboBox.getItemCount();
          hapus(kategoriComboBox,m);
        
         for(int i=0;i<n;i++){
            kategoriComboBox.addItem(data.get(i));
         }
        }else{subKategoriComboBox.removeAllItems();
        subKategoriComboBox.addItem("Sub-kategori");
        int m = kategoriComboBox.getItemCount();
          hapus(kategoriComboBox,m);}
        check(); 
        
        
    }//GEN-LAST:event_dimensiComboBoxActionPerformed
//method ini akan mencari nilai yang sesuai dengan textfield saat keyboard tepat lepas dari jari ketikan
    private void cariTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cariTextFieldKeyReleased
        
        try {
            try {
                // TODO add your handling code here:
                String cari = cariTextField.getText();
                tampilSearch(cari);
            } catch (SQLException ex) {
                Logger.getLogger(HomePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(HomePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cariTextFieldKeyReleased
//method ini akan mereturn nilai yang sesuai dengan filter di table
    private void tahunComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tahunComboBoxItemStateChanged
        // TODO add your handling code here:
         //System.out.println(tahunComboBox.getSelectedItem().toString());
        String bagian = tahunComboBox.getSelectedItem().toString();
        if(!"Tahun".equals(bagian)){
            
            try {
                tampilTahun(bagian);
                //System.out.println(tahunComboBox.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(HomePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
                
            
        }
        
        
    }//GEN-LAST:event_tahunComboBoxItemStateChanged

    private void tahunComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tahunComboBoxActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_tahunComboBoxActionPerformed
//method ini akan membersihkan cariTextField dan tahunComboBox ke nilai default 
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        try {
            // TODO add your handling code here:
            tahunComboBox.setSelectedIndex(0);
            
            cariTextField.setText("");
            loadTableData();
            
        } catch (SQLException | IOException ex) {
            Logger.getLogger(HomePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void cariTextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cariTextFieldMouseExited
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cariTextFieldMouseExited
//method ini akan mengekspor nilai table ke format .csv
    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        // TODO add your handling code here:
        //add JFileChooser buat jadi destinasi file
        JFileChooser j = new JFileChooser();
        //ini biar gak all files yang jadi format, kita set false
        j.setAcceptAllFileFilterUsed(false);
        //kita set cuma CSV yang bisa jadi format file
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Comma Separated Values", "csv");
        j.addChoosableFileFilter(filter);

        //ini title dialog
        j.setDialogTitle("File to save");
        //pop up save dialog
        int userSelection = j.showSaveDialog(this);
        
        
        if(userSelection == JFileChooser.APPROVE_OPTION){
            //save as csv
            File f = j.getSelectedFile();
               if (f!= null){
               f = new File(f.toString()+".csv");
               }
               
            try{
            
                //persiapan write file
            FileWriter fw = new FileWriter(f);
            BufferedWriter b = new BufferedWriter(fw);
            
            
            //write file
            for(int i=0; i<ipkmTable.getRowCount();i++){
               for(int k=0; k<ipkmTable.getColumnCount();k++){
                   b.write(ipkmTable.getValueAt(i,k).toString()+",");
               }
               b.newLine();
            }
            
            //tutup file kalo udah
            b.close();
            fw.close();
            JOptionPane.showMessageDialog(this,"DONE");
            } catch (IOException ex) {
                Logger.getLogger(HomePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
    }//GEN-LAST:event_exportButtonActionPerformed
//method ini akan mengupdate nilai yang terlebih dahulu diklik oleh event mouseclicked
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        int i = ipkmTable.getSelectedRow();
        if(i==-1){
            return;
        }
         
        
        Mahasiswa mhs = new Mahasiswa();
        
        String namaKegiatan = namaKegiatanTextField.getText();
        String tanggalKegiatan = tanggalKegiatanChooser.getDate().toString();
        String tempatKegiatan = tempatKegiatanTextField.getText();
        String dimensi = dimensiComboBox.getSelectedItem().toString(); 
        String kategori = kategoriComboBox.getSelectedItem().toString();
        String subKategori = subKategoriComboBox.getSelectedItem().toString();
        
        mhs.setNamaKegiatan(namaKegiatan);
        mhs.setTanggalKegiatan(tanggalKegiatan);
        mhs.setTempatKegiatan(tempatKegiatan);
        mhs.setDimensi(dimensi);
        mhs.setKategori(kategori);
        mhs.setSubKategori(subKategori);
        mhs.setNim(this.nim);
        mhs.setId(id);
        
        try {
            Database.getInstance().updateIPKM(mhs);
            loadTableData();
            JOptionPane.showMessageDialog(this,"Data diperbaharui!");
        } catch (SQLException | IOException ex) {
            Logger.getLogger(HomePanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Calender value = null", "Gagal", 
                 JOptionPane.ERROR_MESSAGE);
            
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(this, "Calender value = null", "Gagal", 
                 JOptionPane.ERROR_MESSAGE);
            System.out.println("Kalendar belum dipilih");
        }
        
        updateButton.setEnabled(true);
        submitButton.setEnabled(true);    
    }//GEN-LAST:event_updateButtonActionPerformed
 //method ini akan mendelete baris yang terlebih dahulu value-nya diklik oleh event mouse click
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        
        
        int opsi = JOptionPane.showConfirmDialog(null, "Apa Anda yakin akan menghapus baris ini?", 
                "Penghapusan Data", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        
         if (opsi == JOptionPane.YES_OPTION){
             int i = ipkmTable.getSelectedRow();
                if (i ==-1){
                return;
                }
                deleteButton(i);
                }
    }//GEN-LAST:event_deleteButtonActionPerformed
   //method ini mengambil value baris dari table
    private void ipkmTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ipkmTableMouseClicked
        // TODO add your handling code here:
         
         
         int i = ipkmTable.getSelectedRow();
         if (i ==-1){
             return;
         }
         
        String nama = ipkmTable.getValueAt(i,0).toString(); 
        String tempat = ipkmTable.getValueAt(i,2).toString(); 
        String sk = ipkmTable.getValueAt(i,3).toString(); 
         
        try {
            id = Database.getInstance().getId(nim,nama,sk,tempat);
        } catch (SQLException ex) {
            Logger.getLogger(HomePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
         
         
         namaKegiatanTextField.setText(ipkmTable.getValueAt(i,0).toString());
         tempatKegiatanTextField.setText(ipkmTable.getValueAt(i,2).toString());
         subKategoriComboBox.setSelectedItem(ipkmTable.getValueAt(i,3).toString());
         
        
        


                
    }//GEN-LAST:event_ipkmTableMouseClicked
    //method ini dimaksudkan untuk mengecek nilai tanggalKegiatan apa masih "" atau tidak
    private void tanggalKegiatanChooserMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tanggalKegiatanChooserMouseReleased
        // TODO add your handling code here:
       check();
    }//GEN-LAST:event_tanggalKegiatanChooserMouseReleased
  //methdd ini untuk validasi kolom text field yang termaksud 
    private void namaKegiatanTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_namaKegiatanTextFieldKeyReleased
        // TODO add your handling code here:
        String REGEX = ".*[&%$#@!~]+.*";
        if(namaKegiatanTextField.getText()==null   ){
            jLabel12.setText("input tidak boleh kosong ");
            updateButton.setEnabled(false);
            submitButton.setEnabled(false);
        }else if(namaKegiatanTextField.getText().matches(REGEX)){
            jLabel12.setText("input tidak boleh mengandung karakter spesial");
            updateButton.setEnabled(false);
            submitButton.setEnabled(false);
        }else if(namaKegiatanTextField.getText()==""){
           jLabel12.setText("input tidak boleh kosong ");
            updateButton.setEnabled(false);
            submitButton.setEnabled(false); 
        }
        
        check();
    }//GEN-LAST:event_namaKegiatanTextFieldKeyReleased
    //methdd ini untuk validasi kolom text field yang termaksud
    private void tempatKegiatanTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tempatKegiatanTextFieldKeyReleased
        // TODO add your handling code here:
        String REGEX = ".*[&%$#@!~]+.*";
        if(tempatKegiatanTextField.getText()==""   ){
            jLabel13.setText("Tempat kegiatan tidak boleh kosong ");
            updateButton.setEnabled(false);
            submitButton.setEnabled(false);
        }else if(tempatKegiatanTextField.getText().matches(REGEX)){
            jLabel13.setText("Input boleh mengandung karakter spesial");
            updateButton.setEnabled(false);
            submitButton.setEnabled(false);
        }else{
            jLabel13.setText("");
        }
        check();
    }//GEN-LAST:event_tempatKegiatanTextFieldKeyReleased

    private void subKategoriComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subKategoriComboBoxItemStateChanged
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_subKategoriComboBoxItemStateChanged

    private void subKategoriComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subKategoriComboBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_subKategoriComboBoxActionPerformed
    //method ini untuk kembali ke halaman landing page
    private void keluarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keluarButtonActionPerformed
        // TODO add your handling code here:
        int opsi = JOptionPane.showConfirmDialog(null, "Apa Anda yakin untuk keluar?", 
                "Keluar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        
         if (opsi == JOptionPane.YES_OPTION){
             keHome();
                }
        
    }//GEN-LAST:event_keluarButtonActionPerformed
    //method ini untuk membersihkan kolom input
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        clearForm();
    }//GEN-LAST:event_clearButtonActionPerformed
    //method ini untuk menampilkan tahun setelah filter
    public void tampilTahun(String bagian) throws IOException{
        
       
       DefaultTableModel dtm = (DefaultTableModel) ipkmTable.getModel(); 
       //refresh tabel 
       while(dtm.getRowCount()>0){ 
           dtm.removeRow(0); 
       }
       
       String cari = bagian;
       String nim = this.nim;
       try{
       //isi tabel 
        for(Mahasiswa mhs: Database.getInstance().getTahunIPKM(cari,this.nim)){ 
            dtm.addRow(new Object[]{mhs.getNamaKegiatan(),mhs.getTanggalKegiatan(),mhs.getTempatKegiatan(),mhs.getSubKategori()}); 
        } 
       } catch (SQLException ex){
               System.err.println(ex);
         JOptionPane.showMessageDialog(this, "Gagal mengambil data", "Gagal", 
                 JOptionPane.ERROR_MESSAGE);
       }
    }
    
    
    //method ini untuk memasukan nilai paada subkategoriComboBox setelah terpilih nilai yang dimaksud
     public void isiSubKategori(String i){
        
        if("Pendidikan".equals(i)){
          
        subKategoriComboBox.addItem("Diklat Kepemimpinan Tingkat Internasional");
                subKategoriComboBox.addItem("Diklat Kepemimpinan Tingkat Nasional");
                subKategoriComboBox.addItem("Diklat Kepemimpinan Tingkat Provinsi");
                subKategoriComboBox.addItem("Diklat Kepemimpinan Tingkat Kabupaten/Kota/Kampus");
                subKategoriComboBox.addItem("Seminar Kepemimpinan Tingkat Internasional");
                subKategoriComboBox.addItem("Seminar Kepemimpinan Tingkat Nasional");
                subKategoriComboBox.addItem("Seminar Kepemimpinan Tingkat Provinsi");
                subKategoriComboBox.addItem("Seminar Kepemimpinan Tingkat Kabupaten/Kota/Kampus");
        
    }
    
    else if("Ormawa".equals(i)){
        subKategoriComboBox.addItem("Ketua DPM");
                subKategoriComboBox.addItem("Wakil Ketua DPM");
                subKategoriComboBox.addItem("Sekretaris DPM");
                subKategoriComboBox.addItem("Bendahara DPM");
                subKategoriComboBox.addItem("Ketua Komisi/Koordinator DPM");
                subKategoriComboBox.addItem("Anggota DPM");
                
                subKategoriComboBox.addItem("Ketua SEMA");
                subKategoriComboBox.addItem("Wakil Ketua SEMA");
                subKategoriComboBox.addItem("Sekretaris SEMA");
                subKategoriComboBox.addItem("Bendahara SEMA");
                subKategoriComboBox.addItem("Koordinator UKM/Unit SEMA");
                subKategoriComboBox.addItem("Staff/Anggota");
                
                subKategoriComboBox.addItem("KOmandan SPD");
                subKategoriComboBox.addItem("Wakil Komandan SPD");
                subKategoriComboBox.addItem("Kaur SPD");
                subKategoriComboBox.addItem("Wakaur SPD");
                subKategoriComboBox.addItem("Anggota");
                
                subKategoriComboBox.addItem("Komandan Batalyon Menwa");
                subKategoriComboBox.addItem("Wakil Komandan Batalyon Menwa");
                subKategoriComboBox.addItem("Kepala Sie Menwa");
                subKategoriComboBox.addItem("Wakil Kepala Sie Menwa");
                subKategoriComboBox.addItem("Anggota");
    }
    
    else if("Pelaksana Organisasi".equals(i)){
        subKategoriComboBox.addItem("Ketua Tingkat");
                subKategoriComboBox.addItem("Wakil Ketua Tingkat");
                subKategoriComboBox.addItem("Sekretaris Pengurus Tingkat");
                subKategoriComboBox.addItem("Bendahara Pengurus Tingkat");
                subKategoriComboBox.addItem("Koordinator Pengurus Tingkat");
                subKategoriComboBox.addItem("Anggota Pengurus Tingkat");
                
                subKategoriComboBox.addItem("Ketua Pengurus UKM/Bidang/Divisi");
                subKategoriComboBox.addItem("Wakil Ketua Pengurus UKM/Bidang/Divisi");
                subKategoriComboBox.addItem("Sekretaris Pengurus UKM/Bidang/Divisi");
                subKategoriComboBox.addItem("Bendahara Pengurus UKM/Bidang/Divisi");
                subKategoriComboBox.addItem("Koordinator Pengurus UKM/Bidang/Divisi");
               
                subKategoriComboBox.addItem("Ketua Komunitas Resmi STIS");
                subKategoriComboBox.addItem("Wakil Ketua Komunitas Resmi STIS");
                subKategoriComboBox.addItem("Sekretaris Komunitas Resmi STIS");
                subKategoriComboBox.addItem("Bendahara Komunitas Resmi STIS");
                subKategoriComboBox.addItem("Koordinator Komunitas Resmi STIS");
                
                
                subKategoriComboBox.addItem("Ketua Kepanitiaan Terbuka");
                subKategoriComboBox.addItem("Wakil Ketua Kepanitiaan Terbuka");
                subKategoriComboBox.addItem("Sekretaris Kepanitiaan Terbuka");
                subKategoriComboBox.addItem("Bendahara Kepanitiaan Terbuka");
                subKategoriComboBox.addItem("Koordinator Kepanitiaan Terbuka");
                subKategoriComboBox.addItem("Anggota Kepanitiaan Terbuka");
                
                subKategoriComboBox.addItem("Ketua Umum PKL");
                subKategoriComboBox.addItem("Wakil Ketua PKL");
                subKategoriComboBox.addItem("Sekretaris Umum");
                subKategoriComboBox.addItem("Bendahara Umum");
                subKategoriComboBox.addItem("Ketua Bidang/Riset");
                subKategoriComboBox.addItem("Sekretaris Bidang/Riset");
                subKategoriComboBox.addItem("Bendahara Bidang/Riset");
                subKategoriComboBox.addItem("Koordinator Seksi");
                subKategoriComboBox.addItem("Sekretaris/Bendahara Seksi");
                subKategoriComboBox.addItem("Koordinator Subseksi");
                
                subKategoriComboBox.addItem("Wakil Ketua Kelas");
                subKategoriComboBox.addItem("Sekretaris Kelas");
                subKategoriComboBox.addItem("Bendahara Kelas");
                
                subKategoriComboBox.addItem("Ketua DPP FMKI");
                subKategoriComboBox.addItem("Pengurus FMKI Tingkat Pusat");
                subKategoriComboBox.addItem("Ketua DPW FMKI atau setingkat");
                subKategoriComboBox.addItem("Pengurus FMKI Tingkat Wilayah");
                subKategoriComboBox.addItem("Sekjend IHMSI/BP Pusat");
                subKategoriComboBox.addItem("Pengurus IHMSI Tingkat Pusat");
                subKategoriComboBox.addItem("Sekwil IHMSI/BP Wilayah");
                subKategoriComboBox.addItem("Pengurus IHMSI Tingkat Wilayah");
                subKategoriComboBox.addItem("Ketua Fokri PTK");
                subKategoriComboBox.addItem("Pengurus Fokri PTK");
                subKategoriComboBox.addItem("Tidak Terafiliasi STIS Untuk Semua Kedudukan");
    }
    else if("Narasumber".equals(i)){
        subKategoriComboBox.addItem("Narasumber Pelatih/Pengajar (Kegiatan >5 jam)");
                subKategoriComboBox.addItem("Pembicara (kegiatan < 5 jam)");
    }
        
    else if("Prestasi".equals(i)){
        subKategoriComboBox.addItem("Prestasi Kepemimpinan");
    }
    else if("Juara Kompetisi".equals(i)){
        subKategoriComboBox.addItem("Juara 1 Kompetisi tingkat Internasional");
                subKategoriComboBox.addItem("Juara 2 Kompetisi tingkat Internasional");
                subKategoriComboBox.addItem("Juara 3 Kompetisi tingkat Internasional");
                subKategoriComboBox.addItem("Juara Harapan dan kategori lain Kompetisi tingkat Internasional");
                subKategoriComboBox.addItem("Juara 1 Kompetisi Tingkat Nasional");
                subKategoriComboBox.addItem("Juara 2 Kompetisi Tingkat Nasional");
                subKategoriComboBox.addItem("Juara 3 Kompetisi Tingkat Nasional");
                subKategoriComboBox.addItem("Juara Harapan dan Kategori Lain Kompetisi Tingkat Nasional");
                subKategoriComboBox.addItem("Juara 1 Kompetisi Tingkat Regional");
                subKategoriComboBox.addItem("Juara 2 Kompetisi Tingkat Regional");
                subKategoriComboBox.addItem("Juara 3 Kompetisi Tingkat Regional");
                subKategoriComboBox.addItem("Juara 1 Kompetisi Tingkat Provinsi");
                subKategoriComboBox.addItem("Juara 2 Kompetisi Tingkat Provinsi");
                subKategoriComboBox.addItem("Juara 3 Kompetisi Tingkat Provinsi");
                subKategoriComboBox.addItem("Juara 1 Kompetisi Tingkat Kabupaten/Kota");
                subKategoriComboBox.addItem("Juara 2 Kompetisi Tingkat Kabupaten/Kota");
                subKategoriComboBox.addItem("Juara 3 Kompetisi Tingkat Kabupaten/Kota");
    }
    else if("Peserta Kompetisi".equals(i)){
                subKategoriComboBox.addItem("Kompetisi tingkat Internasional");
                subKategoriComboBox.addItem("Kompetisi tingkat Nasional");
                subKategoriComboBox.addItem("Kompetisi tingkat Provinsi");
                subKategoriComboBox.addItem("Kompetisi tingkat Kabupaten/Kota");

    }
    else if("Olimpiade Perguruan Tinggi Kedinasan".equals(i)){
        
                subKategoriComboBox.addItem("Peraih medali emas");
                subKategoriComboBox.addItem("peraih medali perak");
                subKategoriComboBox.addItem("Peraih medali perunggu");
                subKategoriComboBox.addItem("Kontingen OPTK");
    }
    else if("Kompetisi Internal STIS".equals(i)){
        
                subKategoriComboBox.addItem("Juara 1");
                subKategoriComboBox.addItem("Juara 2");
                subKategoriComboBox.addItem("Juara 3");
                subKategoriComboBox.addItem("Juara Kategori Lainnya");
                subKategoriComboBox.addItem("Peserta");
    }
    else if("Putra-Putri STIS".equals(i)){
        
               
                subKategoriComboBox.addItem("Juara 1");
                subKategoriComboBox.addItem("Juara 2");
                subKategoriComboBox.addItem("Juara 3");
                subKategoriComboBox.addItem("Juara Kategori Lainnya");
                subKategoriComboBox.addItem("Peserta");
    }
    else if("Kompetisi Internal STIS".equals(i)){
        
                subKategoriComboBox.addItem("Juara 1");
                subKategoriComboBox.addItem("Juara 2");
                subKategoriComboBox.addItem("Juara 3");
                subKategoriComboBox.addItem("Juara Kategori Lainnya");
                subKategoriComboBox.addItem("Peserta");
    }
    else if("Penulis Buku".equals(i)){
        
               
                subKategoriComboBox.addItem("Menulis buku ber-ISBN dipublikasikan");
                subKategoriComboBox.addItem("Menulis buku non-ISBN dipublikasikan");
    }
    else if("Jurnal Ilmiah".equals(i)){
        
               
              
                subKategoriComboBox.addItem("Menulis artikel di surat kabar cetak/daring internasional");
                subKategoriComboBox.addItem("Menulis artikel di surat kabar cetak/daring nasional");
                subKategoriComboBox.addItem("Menulis artikel di surat kabar cetak/daring regional");
                subKategoriComboBox.addItem("Menulis di majalah popular");  
    }
    else if("Menjadi Pembicara/Pelatih".equals(i)){
        
               
                
                subKategoriComboBox.addItem("Menjadi pembicara/pelatih pada seminar/lokakarya/pelatihan tingkat internasional");
                subKategoriComboBox.addItem("Menjadi pembicara/pelatih pada seminar/lokakarya/pelatihan tingkat nasional");
                subKategoriComboBox.addItem("Menjadi pembicara/pelatih pada seminar/lokakarya/pelatihan tingkat regional");
                subKategoriComboBox.addItem("Menjadi pembicara/pelatih pada seminar/lokakarya/pelatihan tingkat kampus");               
                
    }
    else if("Panitia Kegiatan Sosial".equals(i)){
        
               
                
                 
                subKategoriComboBox.addItem("Panitia kegiatan internal sosial dan pengabdian masyarakat terafiliasi kampus");
                subKategoriComboBox.addItem("Panitia Kegitaan eksternal sosial dan pengabdian masyarakat terafiliasi kampus");
                subKategoriComboBox.addItem("Panitia kegiatan sosial dan pengabdian masyarakat tidak terafiliasi kampus diketahui Ketua Senat Mahasiswa");
                
    }
    else if("Relawan Kegiatan Sosial".equals(i)){
        
               
                
                
                subKategoriComboBox.addItem("Relawan kegiatan sosial dan pengabdian masyarakat terafiliasi kampus");
                subKategoriComboBox.addItem("Relawan kegiatan sosial dan pengabdian masyarakat tidak terafiliasi kampus diketahui Ketua Senat Mahasiswa");
                
    }
    else if("Pelatihan dan Pengabdian Masyarakat".equals(i)){
        
               
                subKategoriComboBox.addItem("Mengikuti kegiatan \n" +
" Seminar/Lokakarya/Pelatihan\n" +
" Sosial dan Pengabdian Masyarakat\n" +
" Tingkat Internasional");
                subKategoriComboBox.addItem("Mengikuti kegiatan \n" +
" Seminar/Lokakarya/Pelatihan\n" +
" Sosial dan Pengabdian Masyarakat\n" +
" Tingkat Nasional");
                subKategoriComboBox.addItem("Mengikuti kegiatan \n" +
" Seminar/Lokakarya/Pelatihan\n" +
" Sosial dan Pengabdian Masyarakat\n" +
" Tingkat Regional/Provinsi");
                subKategoriComboBox.addItem("Mengikuti Kegiatan\n" +
" Seminar/Lokakarya/Pelatihan\n" +
" Sosial dan Pengabdian Masyarakat\n" +
" Tingkat Kampus");
                
    }
    else if("Kegiatan Sosial Lainnya".equals(i)){
        
               
                
                    subKategoriComboBox.addItem("Donor Darah");
                
    }
    else if("Keanggotaan UKM/Bidang/Divisi".equals(i)){
        
               subKategoriComboBox.addItem("Anggota UKM/Bidang/Divisi");
                
                   
                
    }
    else if("Peserta Kegiatan Terbuka UKM/SEMA".equals(i)){
        
               
                    subKategoriComboBox.addItem("Peserta kegiatan terbuka yang\n" +
" diselenggarakan\n" +
" SEMA/UKM/Bidang");
                
                   
                
    }
    else if("Peserta Seminar".equals(i)){
        
                subKategoriComboBox.addItem("Mengikuti kegiatan\n" +
" seminar/lokakarya/pelatihan\n" +
" tingkat internasional");
                subKategoriComboBox.addItem("Mengikuti kegiatan\n" +
" seminar/lokakarya/pelatihan\n" +
" tingkat nasional");
                subKategoriComboBox.addItem("Mengikuti kegiatan\n" +
" seminar/pelatihan/lokakarya\n" +
" tingkat regional/provinsi");
                subKategoriComboBox.addItem("Mengikuti kegiatan\n" +
" seminar/pelatihan/lokakarya\n" +
" tingkat kabupaten/kota/kampus");
                
    }
                
    }
    
   
    
    //method ini untuk membersihkan value pada panel input
    
    @Override
    public void clearForm(){
        
        namaKegiatanTextField.setText("");
        //tanggalKegiatanChooser.setDate(2, java.sql.Date.valueOf("2013-09-04"));
        tempatKegiatanTextField.setText("");
        dimensiComboBox.setSelectedIndex(0);
        
    }
    //mehtod ini untuk me-load ulang table sesuai database
    private void loadTableData() throws SQLException, IOException{
       DefaultTableModel dtm = (DefaultTableModel) ipkmTable.getModel(); 
       //refresh tabel 
       while(dtm.getRowCount()>0){ 
           dtm.removeRow(0); 
       } 
       
        try{
       //isi tabel 
        for(Mahasiswa mhs: Database.getInstance().getListIPKM(this.nim)){ 
            dtm.addRow(new Object[]{mhs.getNamaKegiatan(),mhs.getTanggalKegiatan(),mhs.getTempatKegiatan(),mhs.getSubKategori()}); 
        } 
       } catch (SQLException ex){
               System.err.println(ex);
         JOptionPane.showMessageDialog(this, "Gagal mengambil data", "Gagal", 
                 JOptionPane.ERROR_MESSAGE);
       }
    }
    
    //method ini untuk mengembalikan nilai pencarian
    public void tampilSearch(String cari) throws IOException, SQLException{
        
       DefaultTableModel dtm = (DefaultTableModel) ipkmTable.getModel(); 
       //refresh tabel 
       while(dtm.getRowCount()>0){ 
           dtm.removeRow(0); 
       }
       
       
       if(!"".equals(cari)){
       try{
       //isi tabel 
        for(Mahasiswa mhs: Database.getInstance().getSearchIPKM(cari,this.nim)){ 
            dtm.addRow(new Object[]{mhs.getNamaKegiatan(),mhs.getTanggalKegiatan(),mhs.getTempatKegiatan(),mhs.getSubKategori()}); 
        } 
       } catch (SQLException ex){
               System.err.println(ex);
         JOptionPane.showMessageDialog(this, "Gagal mengambil data", "Gagal", 
                 JOptionPane.ERROR_MESSAGE);
       }
       }else{
           loadTableData();
       }

    }
    
    //method ini adalah method terbaik saya, simpel tapi sangat berpengaruh terhadap
    //keberhasilan program ini
    
    //method ini menghapus combobox dari nilai tertinggi sampai indeks ke 1, jadi return-nya bukan null
    public void hapus(JComboBox j, int n){
     
        for(int i=n-1;i>=1;i--){
             j.removeItemAt(i);
        }
       
        
}
    //method ini untuk menghapus value terpilih
    public void deleteButton(int i){
         
         
        String nama = ipkmTable.getValueAt(i,0).toString(); 
        String tempat = ipkmTable.getValueAt(i,2).toString(); 
        String sk = ipkmTable.getValueAt(i,3).toString();
         
         try {
            id = Database.getInstance().getId(nim,nama,sk,tempat);
        } catch (SQLException ex) {
            Logger.getLogger(HomePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        try {
            Database.getInstance().deleteIPKM(id);
            JOptionPane.showMessageDialog(this,"Deleted!");
            loadTableData();
            
        } catch (SQLException | IOException ex) {
            Logger.getLogger(HomePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //method ini untuk memeriksa apakah masih ada string kosong pada kolom yang termaksud
    @Override
    public void check(){
        String nama= namaKegiatanTextField.getText();
        String tempat = tempatKegiatanTextField.getText();
        //String tanggal = tanggalKegiatanChooser.getDate().toString();
        String dimensi = dimensiComboBox.getSelectedItem().toString();
        String kategori = kategoriComboBox.getSelectedItem().toString();
        String subKategori = subKategoriComboBox.getSelectedItem().toString();
        if(("".equals(nama)||"".equals(tempat)||kategori== "Kategori"||dimensi=="Dimensi"||subKategori=="Sub-kategori")){
            submitButton.setEnabled(false);
            updateButton.setEnabled(false);
        }else if((!"".equals(nama)&&!"".equals(tempat)&&kategori!= "Kategori"&&dimensi!="Dimensi"&&subKategori!="Sub-kategori")){
            submitButton.setEnabled(true);
            updateButton.setEnabled(true);
        }
    }
    
    //method ini untuk log out kembali ke home
    @Override
    public void keHome(){
        contentScrollPane.setViewportView(new LoginPanel(contentScrollPane));
    }
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cariTextField;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> dimensiComboBox;
    private javax.swing.JButton exportButton;
    private javax.swing.JTable ipkmTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> kategoriComboBox;
    private javax.swing.JButton keluarButton;
    private javax.swing.JTextField namaKegiatanTextField;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox<String> subKategoriComboBox;
    private javax.swing.JButton submitButton;
    private javax.swing.JComboBox<String> tahunComboBox;
    private com.toedter.calendar.JDateChooser tanggalKegiatanChooser;
    private javax.swing.JTextField tempatKegiatanTextField;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
